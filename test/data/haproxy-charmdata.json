{
  "maintainer": [
    "Juan Negron <juan@ubuntu.com>",
    "Tom Haddon <tom.haddon@canonical.com>"
  ],
  "owner": "charmers",
  "provides": {
    "website": {
      "interface": "http"
    },
    "munin": {
      "interface": "munin-node"
    },
    "nrpe-external-master": {
      "interface": "nrpe-external-master",
      "scope": "container"
    }
  },
  "series": "precise",
  "config": {
    "options": {
      "default_timeouts": {
        "default": "queue 1000, connect 1000, client 1000, server 1000",
        "type": "string",
        "description": "Default timeouts"
      },
      "nagios_context": {
        "default": "juju",
        "type": "string",
        "description": "Used by the nrpe-external-master subordinate charm.\nA string that will be prepended to instance name to set the host name\nin nagios. So for instance the hostname would be something like:\n    juju-postgresql-0\nIf you're running multiple environments with the same services in them\nthis allows you to differentiate between them.\n"
      },
      "global_log": {
        "default": "127.0.0.1 local0, 127.0.0.1 local1 notice",
        "type": "string",
        "description": "Global log line ( multiples ... comma separated list )"
      },
      "global_spread_checks": {
        "default": 0,
        "type": "int",
        "descriptions": "Sometimes it is desirable to avoid sending health checks to servers at\nexact intervals, for instance when many logical servers are located on\nthe same physical server. With the help of this parameter, it becomes \npossible to add some randomness in the check interval between 0 and \n+/- 50%. A value between 2 and 5 seems to show good results.\n"
      },
      "global_debug": {
        "default": false,
        "type": "boolean",
        "description": "Debug or not"
      },
      "default_options": {
        "default": "httplog, dontlognull",
        "type": "string",
        "description": "Default options"
      },
      "monitoring_allowed_cidr": {
        "default": "127.0.0.1/32",
        "type": "string",
        "description": "CIDR allowed ( multiple CIDRs separated by space ) access to the\nmonitoring interface.\n"
      },
      "monitoring_port": {
        "default": 10000,
        "type": "int",
        "description": "Default monitoring port"
      },
      "global_user": {
        "default": "haproxy",
        "type": "string",
        "description": "User"
      },
      "monitoring_username": {
        "default": "haproxy",
        "type": "string",
        "description": "Monitoring username"
      },
      "default_log": {
        "default": "global",
        "type": "string",
        "description": "Default log"
      },
      "enable_monitoring": {
        "default": false,
        "type": "boolean",
        "description": "Enable monitoring"
      },
      "monitoring_password": {
        "default": "changeme",
        "type": "string",
        "description": "Password to the monitoring interface ( if \"changeme\", a new password\nwill be generated and displayed in juju-log )\n"
      },
      "default_mode": {
        "default": "http",
        "type": "string",
        "description": "Default mode"
      },
      "global_group": {
        "default": "haproxy",
        "type": "string",
        "description": "Group"
      },
      "monitoring_stats_refresh": {
        "default": 3,
        "type": "int",
        "description": "Monitoring interface refresh interval (in seconds)"
      },
      "default_retries": {
        "default": 3,
        "type": "int",
        "description": "Set the number of retries to perform on a server after a connection\nfailure. It is important to understand that this value applies to the\nnumber of connection attempts, not full requests. When a connection \nhas effectively been established to a server, there will be no more \nretry.\nIn order to avoid immediate reconnections to a server which is \nrestarting, a turn-around timer of 1 second is applied before a retry\noccurs.\n"
      },
      "services": {
        "default": "- service_name: haproxy_service\n  service_host: \"0.0.0.0\"\n  service_port: 80\n  service_options: [balance leastconn]\n  server_options: maxconn 100\n",
        "type": "string",
        "description": "Services definition(s). Although the variable type is a string, this is\ninterpreted in the charm as yaml. To use multiple services within the\nsame haproxy instance, specify all of the variables (service_name,\nservice_host, service_port, service_options, server_options) with a \"-\"\nbefore the first variable, service_name, as above. Service options is a\ncomma separated list, server options will be appended as a string to\nthe individual server lines for a given listen stanza.\n"
      },
      "global_maxconn": {
        "default": 4096,
        "type": "int",
        "description": "Sets the maximum per-process number of concurrent connections to\n<number>.\n"
      },
      "global_quiet": {
        "default": false,
        "type": "boolean",
        "description": "Quiet"
      }
    }
  },
  "description": "HAProxy is a TCP/HTTP reverse proxy which is particularly suited for high availability environments. It features connection persistence through HTTP cookies, load balancing, header addition, modification, deletion both ways. It has request blocking capabilities and provides interface to display server status.",
  "store_url": "cs:precise/haproxy-16",
  "requires": {
    "reverseproxy": {
      "interface": "http"
    }
  },
  "store_revision": 16,
  "name": "haproxy",
  "last_change": {
    "committer": "Juan L. Negron <juan.negron@canonical.com>",
    "message": "When the reverseproxy relation changes, the website proxy will likely need to be updated, so trigger a config-changed to notify the other side of the relation that it will need to update.\n\nI'm not sure if this the appropriate way to handle this situation, but in practice it seems to work. Please let me know if there is a more accurate or correct way to do it.  LP:148605",
    "revno": 65,
    "created": 1360904114.989
  },
  "summary": "fast and reliable load balancing reverse proxy",
  "bzr_branch": "lp:~charmers/charms/precise/haproxy/trunk",
  "proof": {}
}
