===========
Development
===========

Here is how to develop on this codebase.

Developer Install
=================

Juju GUI uses nodejs-based development tools.

You will need ``nodejs`` & ``npm`` from the PPA::

  sudo add-apt-repository ppa:chris-lea/node.js
  sudo apt-get update
  sudo apt-get install nodejs npm

You also need ImageMagick::

  sudo apt-get install imagemagick

The linter will be installed locally per branch, but if you want editor
integration, you may want to install JSHint globally in your system::

  sudo npm install -g jshint

For building the docs, you also need Sphinx::

  sudo apt-get install python-sphinx

To make releases, you will need PyTZ::

  sudo apt-get install python-tz

The Juju GUI can be installed and run with::

  bzr branch lp:juju-gui trunk
  cd trunk
  make prod

It may take a while for the server to start the first time as npm will
need to download packages.  When ready, the server will print::

  Server listening on 8888

You can then access the GUI at <http://localhost:8888/>.

The front-end needs to talk to a Juju backend.  So first you will need
to install Juju::

   sudo apt-get install juju zookeeper

Next you will also need to deploy a Juju environment with REST API access.
Currently that work resides in a pipeline of Juju branches. The
recommended branch to use as a server is ``rapi-rollup`` by hazmat::

   bzr branch lp:~hazmat/juju/rapi-rollup

You can use it with any environment, but for development purposes, a local
environment works well. One environment option specific to this branch
is the ``api-port``. An appropriate sample configuration::

  default: dev
  environments:
    dev:
      type: local
      data-dir: /home/kapil/.juju/local
      admin-secret: b3a5dee4fb8c4fc9a4db04751e5936f4
      default-series: precise
      juju-origin: ppa
      api-port: 8081

Note that ``juju-origin`` is set to the PPA, the API server runs outside of
the container, and it is launched using whichever branch you are using.

Also note that the ``api-port`` should be set at 8081, which the GUI's
initial environment connection currently defaults to.

You will need to bootstrap the local environment, and deploy one service.
The API server needs access to the provisioning credentials which are
lazily initialized in Juju upon usage.

``Juju-gui`` and ``rapi-rollup`` can communicate via an encrypted WebSocket
connection: to enable it, add the following line to the config above::

  api-secure: true

You will also need to edit ``app/config-debug.js`` and ``app/config-prod.js``
replacing ``ws://localhost:8081/ws`` with ``wss://localhost:8081/ws``.

By default, ``rapi-rollup`` uses a self-signed certificate; because of that you
will need to visit the <https://localhost:8081/ws> WebSocket URL with your
browser and accept the included self-signed certificate, or the WebSocket
encrypted connection will not work.

In order to use a different certificate you add an ``api-keys`` option to the
config above: its value will be the path of the directory containing the
certificate and the private key, whose filenames will have to be respectively
``juju.crt`` and ``juju.key``.

After this, the GUI should be functional (it automatically polls the
API server for establishing a websocket).

Running Unit Tests
==================

You can run the unit tests with the ``make test-debug`` and ``make test-prod``
commands.

Running Lint
============

Run the linter with the commands::

  sudo apt-get install python-virtualenv
  make lint

API Documentation
=================

Generated JavaScript documentation is available in the ``yuidoc``
directory.  You can view the docs by running::

  make yuidoc
  xdg-open yuidoc/index.html

See the YUIDoc markup `documentation <http://yui.github.com/yuidoc/syntax/>`_
for details on its syntax.

Project Documentation
=====================

The project documentation is available in the ``docs/`` directory. It needs
Sphinx::

  sudo apt-get install python-sphinx

Build the documentation with ``make sphinx`` and view it::

  xdg-open docs/_build/html/index.html

Making Releases
===============

To make a release, you must either be in a checkout of ``lp:juju-gui``
without uncommitted changes, or you must override one of the
`pertinent variable names`_ to force a release.

.. _`pertinent variable names`: `Potentially Useful Release-Oriented Makefile Variables`_

To make the release tarball use ``make distfile``.

In order to make and upload the release (``make dist``), you also need to have
a GPG key, and the ``python-pytz`` package installed (as well as
``launchpadlib``, but that is installed by default in Ubuntu).

See the Process document (``docs/process.rst``) for step-by-step checklists to
make developer and stable releases.

Potentially Useful Release-Oriented Makefile Variables
------------------------------------------------------

The following is a list of pertinent Makefile variables.

``FINAL``
  Set ``FINAL`` to any non-empty value to make a final release. This will cause
  the ``bzr revno`` to be omitted from the tarball name, and (if you use the
  release target) will cause the release to be uploaded to the stable series
  rather than the trunk series. Example usage::

    FINAL=1 make dist

``PROD``
  By default, releases will be uploaded to ``staging.launchpad.net``, which is
  a separate version of Launchpad that uses a temporary database.  This can be
  convenient for trying out the release process in the Makefile without
  affecting our actual production releases.  Set ``PROD`` to any non-empty
  value to send uploads to ``launchpad.net``, the production version of
  Launchpad, when you are ready to make a real release.

  Note that you may need to ask the webops to turn off the two-factor
  authentication on your Launchpad staging account in order for the staging to
  work. Go to the ``#launchpad-ops`` channel on the Canonical IRC server and
  ask something like "webops, could you disable 2FA on my staging account?".

  Example usage::

    PROD=1 make dist

``IS_TRUNK_BRANCH``
  Set this to any non-empty value to force the Makefile to believe it is
  working with a trunk checkout. Example usage::

    IS_TRUNK_BRANCH=1 make dist

``BRANCH_IS_CLEAN``
  Set this to any non-empty value to force the Makefile to believe that the
  current code tree has no changes. Example usage::

    BRANCH_IS_CLEAN=1 make dist

``BRANCH_IS_GOOD``
  Set this to any non-empty value to force the Makefile to bypass checks of
  ``IS_TRUNK_BRANCH`` and ``BRANCH_IS_CLEAN``. Example usage::

    BRANCH_IS_GOOD=1 make dist
