#!/usr/bin/env node

/**
 * We should aggregate and minimize the js sources in order to improve the load
 * speed of the application;
 * 
 * We dont want to use the yui combo loader feature;
 * 
 * The final product will provide three js files: one for the YUI dependencies,
 * one for our custom js code and one for third part js like d3
 */
 
'use strict';

// We need the yui name to be available in all modules (global variable). This
// only happens if we remove the 'var' keyword or add it to the "global"
// variable.
global.YUI = require('yui').YUI;

var Y = YUI(),
    fs = require('fs'),
    syspath = require('path'),
    compressor = require('node-minify'),
    paths,
    reqs;

function minify(file) {
  var execution = new compressor.minify(
      { type: 'uglifyjs',
        fileIn: file,
        fileOut: file,
        callback: function(err) {
          if (err) {
            console.log(err);
          }
        }});
}

// It combines the files defined by "files" into a single (compressed or not)
// js file.
function combine(files, outputFile, shouldMinify) {
  var str = [];
  Y.Array.each(files, function(file) {
    console.log('file -> ' + file);
    str.push(fs.readFileSync(file, 'utf8'));
  });
  fs.writeFileSync(outputFile, str.join('\n'), 'utf8');
  if (shouldMinify) {
    minify(outputFile);
  }
}
// It gets the name of all the files under 'path'
function readdir(path) {
  var result = [],
      dirs = [],
      files = fs.readdirSync(path),
      // I need to use "syspath.join(process.cwd()" otherwise I have...
      // "ReferenceError: CSSStyleDeclaration is not defined" from d3
      assetsFolder = syspath.join(process.cwd(), './app/assets');

  Y.Array.each(files, function(value) {
    var fileName, file;
    fileName = path + '/' + value;
    file = fs.statSync(fileName);
    if (file.isFile()) {
      if (syspath.extname(fileName).toLowerCase() === '.js') {
        // This file is not a yui module
        if ('./app/modules-debug.js' === fileName) {
          console.log('SKIPPING FILE -> ' + fileName);
        } else {
          result.push(fileName);
        }
      }
    } else if (file.isDirectory()) {
      console.log('DIRECTORY -> ' + fileName);
      // The files under the assets folder are not combined
      if (assetsFolder === fileName) {
        console.log('SKIPPING DIRECTORY -> ' + fileName);
      } else {
        dirs.push(fileName);
      }
    }
  });

  // We wrote all the files. Now it is time to read and write the files
  // inside the children directories.
  Y.Array.each(dirs, function(directory) {
    var children = readdir(directory);
    Y.Array.each(children, function(child) {
      result.push(child);
    });
  });
  
  return result;
}

// It reads the 'requires' attribute of all our custom js files
function loadRequires(paths) {
  var originalAdd, files, modules, yuiReqs;
  modules = {};

  // reading all JS files under './app'
  // I need to use "syspath.join(process.cwd()" otherwise I have...
  // "Error: Cannot find module './app/config.js'" from node's internal
  // module.js file.
  files = readdir(syspath.join(process.cwd(), './app'))
  console.log('FILES loaded');

  originalAdd = YUI.add;
  // This is a trick to get the 'requires' value from the module definition
  YUI.add = function(name, fn, version, details) {
    modules[name] = [];
    if (details && details.requires) {
      Y.Array.each(details.requires, function(value) {
        modules[name].push(value);
      });
    }
  };

  Y.Array.each(paths, function(customJs) {
    // It triggers the custom 'add' method above
    require(customJs);
  });
  YUI.add = originalAdd;
  
  //Getting all the YUI dependencies that we need
  yuiReqs = [];
  Y.Object.each(modules, function(requires) {
    Y.Array.each(requires, function(value) {
      if (!modules[value]) {
        // This is not one of our modules but a yui one.
        if (yuiReqs.indexOf(value) < 0) {
          // avoid duplicates
          yuiReqs.push(value);
        }
      }
    });
  });
  
  return yuiReqs;
}

//Using the example http://yuilibrary.com/yui/docs/yui/loader-resolve.html
//It uses the reqs object that we created in the previous block and figures
//out the js files that contain it, so we can mount our combines js file
//for all the yui requirements.
function getYUIFiles(reqs) {
  var loader, out;
  loader = new Y.Loader({
    base: './node_modules/yui/',
    ignoreRegistered: true,
    require: reqs
  });
  out = loader.resolve(true);
  return out.js;
}

//reading all JS files under './app'
// I need to use "syspath.join(process.cwd()" otherwise I have...
// "Error: Cannot find module './app/config.js'" from node's internal
// module.js file.
paths = readdir(syspath.join(process.cwd(), './app'));

// Get the name of all the YUI modules that our custom js files use.
reqs = loadRequires(paths);

// Combine yui files
combine(getYUIFiles(reqs), './app/assets/javascripts/generated/all-yui.js', true);

// Combine third part js libraries
combine(['./app/assets/javascripts/d3.v2.min.js',
         './app/assets/javascripts/reconnecting-websocket.js',
         './app/assets/javascripts/svg-layouts.js'],
'./app/assets/javascripts/generated/all-third.js', true);

// Combine modules-debug.js and config.js
combine(['./app/modules-debug.js', './app/config.js'],
    './app/assets/javascripts/generated/all-app-debug.js', false);

// Combine  all our custom js files
combine(paths, './app/assets/javascripts/generated/all-app.js', true);
